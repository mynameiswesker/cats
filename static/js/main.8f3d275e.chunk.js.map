{"version":3,"sources":["Components/Form.js","Components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Form","text","updateData","close_div","useState","my_text","change_text","change_input","e","target","name","value","useEffect","className","type","defaultValue","name1","onChange","name2","with","quantity","present","weight","icon","faWindowClose","style","fontSize","color","onClick","Cart","getCart","isHover","changeHover","isClick","changeClick","text_cart","change_text_cart","isActive","changeActive","handler_hover","useCallback","handler_leave","handle_click","data","closeChangeDiv","onMouseEnter","onMouseLeave","borderColor","disable","pointerEvents","display","margin","marginBottom","faPaintBrush","cursor","ptext","App","carts","change_carts","console","log","length","includes","filter","cart","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f3d275e.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faWindowClose} from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport function Form({text,updateData,close_div}) {\r\n\r\n  const [my_text,change_text] = useState(text)\r\n\r\n    const change_input = (e)=>{\r\n      change_text({...my_text,[e.target.name]:e.target.value})\r\n    }\r\n\r\n    //передали измененный текст\r\n    useEffect(()=>{\r\n      updateData(my_text)\r\n    },[my_text,updateData])\r\n\r\n    //передали false при закрытии окна редактирования\r\n    const closeDiv = ()=>{\r\n      close_div(false)\r\n    }\r\n    \r\n  return (\r\n    <div className='form'>\r\n        <form>\r\n          <label>Название1</label>\r\n          <input type='text' defaultValue={my_text.name1} onChange={e=>change_input(e)} name='name1'/>\r\n          \r\n          <label>Название2</label>\r\n          <input type='text' defaultValue={my_text.name2} onChange={e=>change_input(e)} name='name2'/>\r\n          \r\n          <label>С чем</label>\r\n          <input type='text' defaultValue={my_text.with} onChange={e=>change_input(e)} name='with'/>\r\n          \r\n          <label>Кол-во порций</label>\r\n          <input type='text' defaultValue={my_text.quantity} onChange={e=>change_input(e)} name='quantity'/>\r\n          \r\n          <label>Подарок</label>\r\n          <input type='text' defaultValue={my_text.present} onChange={e=>change_input(e)} name='present'/>\r\n          \r\n          <label>Масса</label>\r\n          <input type='text' defaultValue={my_text.weight} onChange={e=>change_input(e)} name='weight'/>\r\n        </form>\r\n        <div className='close'>\r\n            <FontAwesomeIcon icon={faWindowClose} style={{fontSize:'25px',color:'white'}} onClick={closeDiv}/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;","import React,{useState, useCallback} from 'react';\r\nimport {Form} from './Form'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faPaintBrush} from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport function Cart({text,getCart}) {\r\n\r\n    const [isHover,changeHover] = useState(false)//toggle div\r\n    const [isClick,changeClick] = useState(false)//click button\r\n    const [text_cart,change_text_cart] = useState(text)//состояние текста в карте\r\n    const [isActive,changeActive] = useState(false)//состояние активной карты\r\n    \r\n    let color_default = '#1698d9'\r\n    let color_active = '#d91667'\r\n\r\n    //показать редактирование при наведении\r\n    const handler_hover = useCallback(()=>{\r\n        changeHover(true)\r\n    },[])\r\n\r\n    //скрыть редактирование при уходе\r\n    const handler_leave = useCallback(()=>{\r\n        changeHover(false)\r\n    },[changeHover])\r\n\r\n    //при клике на кнопку редактировать/показать настройки текста\r\n    const handle_click = useCallback(()=>{\r\n        changeClick(!isClick)\r\n    },[isClick])\r\n\r\n    //достали из ребенка пропс с данными измененной формы и записали в состояние родителя\r\n    const updateData = useCallback((data)=> {\r\n        change_text_cart(data)\r\n    },[change_text_cart])\r\n\r\n    //закрыли див редактирования\r\n    const closeChangeDiv = useCallback((data)=>{\r\n        changeClick(data)\r\n    },[changeClick])\r\n\r\n    //передали выбранную карту родителю \r\n    const handler_add_cart = () => {\r\n        getCart(text_cart)\r\n    }\r\n\r\n  return (\r\n   <div>\r\n       <div \r\n            className='cart' \r\n            onMouseEnter={handler_hover} \r\n            onMouseLeave={handler_leave} \r\n            style={isActive ? {borderColor:color_active} : {borderColor:color_default} && text_cart.disable ? {pointerEvents:'none'} : {pointerEvents:'all'}}\r\n            onClick={()=>{\r\n                changeActive(!isActive)\r\n                handler_add_cart()\r\n                }\r\n            }\r\n        >\r\n        <div \r\n            className='disable' \r\n            style={text_cart.disable ? {pointerEvents:'none',display:'block'} : {pointerEvents:'all'}}\r\n        ></div>\r\n        <div className='words'>\r\n                <h3 className='h_top' style={{margin:'20px 0 5px 0'}}>{text_cart.name1}</h3>\r\n                <h1 style={{margin:'5px 0 5px 0',fontSize:'45px'}}>{text_cart.name2}</h1>\r\n                <div className='content_left'>\r\n                    <h2>{text_cart.with}</h2>\r\n                    <p style={{marginBottom:'0px',color:'rgb(102, 102, 102)'}}>{text_cart.quantity}</p>\r\n                    <p style={{color:'rgb(102, 102, 102)'}}>{text_cart.present}</p>\r\n                </div>\r\n        </div>\r\n        <div className='kg'>\r\n                <div className='round_kg'>\r\n                    <p style={{fontSize:'40px'}}>{text_cart.weight}</p>\r\n                    <p style={{fontSize:'20px'}}>кг</p>\r\n                </div>\r\n        </div>\r\n        {isHover ? \r\n            <button className='change' onClick={handle_click}>\r\n                <FontAwesomeIcon icon={faPaintBrush} style={{fontSize:'20px',color:'#1698d9',cursor:'pointer'}}/>\r\n            </button>\r\n            : ''\r\n        }\r\n        </div>\r\n            <p style={{color:'white',fontSize:'12px'}}>{text_cart.ptext}</p>\r\n            {\r\n                isClick ? \r\n                <Form text={text_cart} updateData={updateData} close_div={closeChangeDiv}/>\r\n                :''\r\n            }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cart;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {Cart} from './Components/Cart'\n\nfunction App() {\n\n  const [carts,change_carts] = useState([])\n  const [disable] = useState(true)\n  \n  //показать состояние выбранных карт\n  useEffect(()=>{\n    console.log(carts)\n  })\n\n  //добавили карту в состояние корзины для выбранных карт\n  const getCart = (data)=>{\n      if(carts.length === 0){//если массив корзины пуст , то добавить продукт\n        change_carts([...carts,data])\n      }\n      if(carts.length>0){//если в массиве что то есть , проверить\n        change_carts(function(){\n\n          if(carts.includes(data)){//если есть совпадения\n              return carts.filter(cart=>cart.id !== data.id)//то удалить из массива (повторный клик)\n          }\n            return [...carts,data]//по дефолту добавлять продукт\n        })\n      }\n  }\n\n  return (\n   <div className='wrapp'>\n     <div>\n       <h1 style={{color:'white'}}>Ты сегодня кормил кота?</h1>\n     </div>\n     <div className='wrapp_cart'>\n      <Cart text={{\n        name1: 'Сказочное заморское яство',\n        name2: 'Нямушка',\n        with: 'С фуа-гра',\n        quantity: '10 порций',\n        present: 'мышь в подарок',\n        weight: '0,5',\n        id:1,\n        ptext:`Чего сидишь? Порадуй котэ, купи`,\n        disable:!disable\n      }}\n      getCart={getCart}\n      />\n      <Cart text={{\n        name1: 'Сказочное заморское яство',\n        name2: 'Нямушка',\n        with: 'с рыбой',\n        quantity: '40 порций',\n        present: '2 мыши в подарок',\n        weight: '2',\n        id:2,\n        ptext:'Головы щучьи с чесноком да свежайшая сёмгушка',\n        disable:!disable\n      }}\n      getCart={getCart}\n      />\n      <Cart text={{\n        name1: 'Сказочное заморское яство',\n        name2: 'Нямушка',\n        with: 'С курой',\n        quantity: '100 порций',\n        present: '5 мышей в подарок',\n        weight: '5',\n        id:3,\n        ptext:'Печалька, с курой закончился',\n        disable:disable\n      }}\n      getCart={getCart}\n      />\n     </div>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}